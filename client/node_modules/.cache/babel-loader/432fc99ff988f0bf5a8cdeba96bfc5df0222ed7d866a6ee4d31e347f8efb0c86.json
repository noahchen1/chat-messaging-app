{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repo\\\\offical-messenger\\\\src\\\\context\\\\ConversationsProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport axios from 'axios';\nimport React, { useContext, createContext, useState, useEffect, useCallback } from 'react';\nimport { useAuth } from './AuthProvider';\nimport { useSocket } from './SocketProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/createContext();\nexport function useConversations() {\n  _s();\n  return useContext(ConversationsContext);\n}\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function ConversationsProvider(_ref) {\n  _s2();\n  let {\n    children\n  } = _ref;\n  const CONVERSATIONS_URL = 'http://localhost:4000/conversations';\n  const UPDATE_URL = 'http://localhost:4000/new-conversation';\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversationIdx, setSelectedConversationIdx] = useState(0);\n  const {\n    auth\n  } = useAuth();\n  const socket = useSocket();\n  const refreshToken = auth.refreshToken;\n  const getConversations = useCallback(() => {\n    axios.post(CONVERSATIONS_URL, {\n      refreshToken: refreshToken\n    }).then(res => {\n      setConversations(res.data);\n    });\n  }, [setConversations]);\n  const createConversation = recipients => {\n    const requestBody = {\n      refreshToken: refreshToken,\n      conversation: {\n        recipients: recipients,\n        messages: []\n      }\n    };\n    axios.post(UPDATE_URL, requestBody).then(res => setConversations(res.data));\n  };\n  const addMessageToConversation = useCallback(_ref2 => {\n    let {\n      recipients,\n      text,\n      sender\n    } = _ref2;\n    // setConversations(prevConversation => {\n    //     let madeChange = false;\n    //     const newMessage = { sender, text }\n    //     const newConversations = prevConversation.map(conversation => {\n    //         if (arrayEquality(conversation.recipients, recipients)) {\n    //             madeChange = true;\n    //             return {\n    //                 ...conversation,\n    //                 messages: [...conversation.messages, newMessage]\n    //             }\n    //         }\n\n    //         return conversation\n    //     })\n\n    //     if (madeChange) {\n    //         return newConversations\n    //     }\n    // })\n    setConversations(prevConversation => {\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversation.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          return {\n            ...conversation,\n            messages: [...conversation.messages, newMessage]\n          };\n        }\n        return conversation;\n      });\n      return newConversations;\n    });\n  }, [setConversations]);\n  const sendMessage = (recipients, text) => {\n    socket.emit('send-message', {\n      recipients,\n      text\n    });\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: auth.username\n    });\n  };\n  useEffect(() => {\n    getConversations();\n  }, [getConversations]);\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToConversation]);\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      conversations,\n      createConversation,\n      selectedConversationIdx,\n      setSelectedConversationIdx,\n      sendMessage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n_s2(ConversationsProvider, \"fNTCkhuxu3kjmFgraxXnGmPbEyU=\", false, function () {\n  return [useAuth, useSocket];\n});\n_c = ConversationsProvider;\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"names":["axios","React","useContext","createContext","useState","useEffect","useCallback","useAuth","useSocket","ConversationsContext","useConversations","ConversationsProvider","children","CONVERSATIONS_URL","UPDATE_URL","conversations","setConversations","selectedConversationIdx","setSelectedConversationIdx","auth","socket","refreshToken","getConversations","post","then","res","data","createConversation","recipients","requestBody","conversation","messages","addMessageToConversation","text","sender","prevConversation","newMessage","newConversations","map","arrayEquality","sendMessage","emit","username","on","off","a","b","length","sort","every","element","index"],"sources":["D:/Repo/offical-messenger/src/context/ConversationsProvider.js"],"sourcesContent":["import axios from 'axios';\r\nimport React, { useContext, createContext, useState, useEffect, useCallback } from 'react'\r\nimport { useAuth } from './AuthProvider';\r\nimport { useSocket } from './SocketProvider';\r\n\r\nconst ConversationsContext = createContext();\r\n\r\nexport function useConversations() {\r\n    return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({ children }) {\r\n    const CONVERSATIONS_URL = 'http://localhost:4000/conversations';\r\n    const UPDATE_URL = 'http://localhost:4000/new-conversation';\r\n    const [conversations, setConversations] = useState([]);\r\n    const [selectedConversationIdx, setSelectedConversationIdx] = useState(0);\r\n    const { auth } = useAuth();\r\n    const socket = useSocket();\r\n    const refreshToken = auth.refreshToken;\r\n\r\n    const getConversations = useCallback(() => {\r\n        axios.post(CONVERSATIONS_URL, { refreshToken: refreshToken }).then(res => {\r\n            setConversations(res.data);\r\n        });\r\n    }, [setConversations]);\r\n\r\n    const createConversation = recipients => {\r\n        const requestBody = {\r\n            refreshToken: refreshToken,\r\n            conversation: { recipients: recipients, messages: [] }\r\n        }\r\n\r\n        axios.post(UPDATE_URL, requestBody)\r\n            .then(res => setConversations(res.data));\r\n    };\r\n\r\n    const addMessageToConversation = useCallback(({ recipients, text, sender }) => {\r\n        // setConversations(prevConversation => {\r\n        //     let madeChange = false;\r\n        //     const newMessage = { sender, text }\r\n        //     const newConversations = prevConversation.map(conversation => {\r\n        //         if (arrayEquality(conversation.recipients, recipients)) {\r\n        //             madeChange = true;\r\n        //             return {\r\n        //                 ...conversation,\r\n        //                 messages: [...conversation.messages, newMessage]\r\n        //             }\r\n        //         }\r\n\r\n        //         return conversation\r\n        //     })\r\n\r\n        //     if (madeChange) {\r\n        //         return newConversations\r\n        //     }\r\n        // })\r\n        setConversations(prevConversation => {\r\n            const newMessage = { sender, text }\r\n            const newConversations = prevConversation.map(conversation => {\r\n                if (arrayEquality(conversation.recipients, recipients)) {\r\n                    return {\r\n                        ...conversation,\r\n                        messages: [...conversation.messages, newMessage]\r\n                    }\r\n                }\r\n\r\n                return conversation;\r\n            });\r\n\r\n            return newConversations;\r\n        })\r\n\r\n    }, [setConversations]);\r\n\r\n    const sendMessage = (recipients, text) => {\r\n        socket.emit('send-message', { recipients, text });\r\n\r\n        addMessageToConversation({ recipients, text, sender: auth.username })\r\n    };\r\n\r\n    useEffect(() => {\r\n        getConversations();\r\n    }, [getConversations]);\r\n\r\n    useEffect(() => {\r\n        if (socket == null) return\r\n\r\n        socket.on('receive-message', addMessageToConversation)\r\n\r\n        return () => socket.off('receive-message')\r\n    }, [socket, addMessageToConversation]);\r\n\r\n    return (\r\n        <ConversationsContext.Provider value={{ conversations, createConversation, selectedConversationIdx, setSelectedConversationIdx, sendMessage }}>\r\n            {children}\r\n        </ConversationsContext.Provider>\r\n    )\r\n}\r\n\r\nfunction arrayEquality(a, b) {\r\n    if (a.length !== b.length) return false\r\n\r\n    a.sort()\r\n    b.sort()\r\n\r\n    return a.every((element, index) => {\r\n        return element === b[index]\r\n    })\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
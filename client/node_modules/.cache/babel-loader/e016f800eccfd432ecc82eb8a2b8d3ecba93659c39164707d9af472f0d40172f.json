{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repo\\\\offical-messenger\\\\src\\\\context\\\\ConversationsProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport axios from \"axios\";\nimport React, { useContext, createContext, useState, useEffect, useCallback } from \"react\";\nimport { useAuth } from \"./AuthProvider\";\nimport { useSocket } from \"./SocketProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/createContext();\nexport function useConversations() {\n  _s();\n  return useContext(ConversationsContext);\n}\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function ConversationsProvider(_ref) {\n  _s2();\n  let {\n    children\n  } = _ref;\n  const CONVERSATIONS_URL = \"http://localhost:1000/conversations\";\n  const UPDATE_URL = \"http://localhost:1000/new-conversation\";\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversationIdx, setSelectedConversationIdx] = useState(0);\n  const {\n    auth\n  } = useAuth();\n  const socket = useSocket();\n  const refreshToken = auth.refreshToken;\n  const createConversation = recipients => {\n    const requestBody = {\n      refreshToken: refreshToken,\n      conversation: {\n        recipients: recipients,\n        messages: []\n      }\n    };\n    axios.post(UPDATE_URL, requestBody).then(res => {\n      socket.emit(\"create-conversation\");\n      setConversations(res.data);\n    });\n  };\n  const addMessageToConversation = useCallback(_ref2 => {\n    let {\n      recipients,\n      text,\n      sender\n    } = _ref2;\n    setConversations(prevConversations => {\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          return {\n            ...conversation,\n            messages: [...conversation.messages, newMessage]\n          };\n        }\n        return conversation;\n      });\n      return newConversations;\n    });\n  }, [setConversations]);\n  const sendMessage = (recipients, text) => {\n    socket.emit(\"send-message\", {\n      recipients,\n      text\n    });\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: auth.username\n    });\n  };\n  useEffect(() => {\n    if (auth.refreshToken) {\n      axios.post(CONVERSATIONS_URL, {\n        refreshToken: refreshToken\n      }).then(res => {\n        setConversations(res.data);\n      });\n    }\n  }, [auth]);\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on(\"receive-message\", addMessageToConversation);\n    return () => socket.off(\"receive-message\");\n  }, [socket, addMessageToConversation]);\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on(\"recieve-new-conversation\", () => {\n      console.log(\"someone else opened a new conversation!\");\n      axios.post(CONVERSATIONS_URL, {\n        refreshToken: refreshToken\n      }).then(res => {\n        setConversations(res.data);\n      });\n    });\n    return () => socket.off(\"recieve-new-conversation\");\n  }, [socket, createConversation]);\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      conversations,\n      createConversation,\n      selectedConversationIdx,\n      setSelectedConversationIdx,\n      sendMessage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s2(ConversationsProvider, \"gXWUwZxYF3UrHTaGg7jjnTvYKQk=\", false, function () {\n  return [useAuth, useSocket];\n});\n_c = ConversationsProvider;\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"names":["axios","React","useContext","createContext","useState","useEffect","useCallback","useAuth","useSocket","ConversationsContext","useConversations","ConversationsProvider","children","CONVERSATIONS_URL","UPDATE_URL","conversations","setConversations","selectedConversationIdx","setSelectedConversationIdx","auth","socket","refreshToken","createConversation","recipients","requestBody","conversation","messages","post","then","res","emit","data","addMessageToConversation","text","sender","prevConversations","newMessage","newConversations","map","arrayEquality","sendMessage","username","on","off","console","log","a","b","length","sort","every","element","index"],"sources":["D:/Repo/offical-messenger/src/context/ConversationsProvider.js"],"sourcesContent":["import axios from \"axios\";\r\nimport React, {\r\n  useContext,\r\n  createContext,\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n} from \"react\";\r\nimport { useAuth } from \"./AuthProvider\";\r\nimport { useSocket } from \"./SocketProvider\";\r\n\r\nconst ConversationsContext = createContext();\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({ children }) {\r\n  const CONVERSATIONS_URL = \"http://localhost:1000/conversations\";\r\n  const UPDATE_URL = \"http://localhost:1000/new-conversation\";\r\n  const [conversations, setConversations] = useState([]);\r\n  const [selectedConversationIdx, setSelectedConversationIdx] = useState(0);\r\n  const { auth } = useAuth();\r\n  const socket = useSocket();\r\n  const refreshToken = auth.refreshToken;\r\n\r\n  const createConversation = recipients => {\r\n    const requestBody = {\r\n      refreshToken: refreshToken,\r\n      conversation: { recipients: recipients, messages: [] },\r\n    };\r\n\r\n    axios.post(UPDATE_URL, requestBody).then(res => {\r\n      socket.emit(\"create-conversation\");\r\n      setConversations(res.data);\r\n    });\r\n  };\r\n\r\n  const addMessageToConversation = useCallback(\r\n    ({ recipients, text, sender }) => {\r\n      setConversations(prevConversations => {\r\n        const newMessage = { sender, text };\r\n        const newConversations = prevConversations.map(conversation => {\r\n          if (arrayEquality(conversation.recipients, recipients)) {\r\n            return {\r\n              ...conversation,\r\n              messages: [...conversation.messages, newMessage],\r\n            };\r\n          }\r\n          return conversation;\r\n        });\r\n\r\n        return newConversations;\r\n      });\r\n    },\r\n    [setConversations]\r\n  );\r\n\r\n  const sendMessage = (recipients, text) => {\r\n    socket.emit(\"send-message\", { recipients, text });\r\n\r\n    addMessageToConversation({ recipients, text, sender: auth.username });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (auth.refreshToken) {\r\n      axios\r\n        .post(CONVERSATIONS_URL, { refreshToken: refreshToken })\r\n        .then(res => {\r\n          setConversations(res.data);\r\n        });\r\n    }\r\n  }, [auth]);\r\n\r\n  useEffect(() => {\r\n    if (socket == null) return;\r\n\r\n    socket.on(\"receive-message\", addMessageToConversation);\r\n\r\n    return () => socket.off(\"receive-message\");\r\n  }, [socket, addMessageToConversation]);\r\n\r\n  useEffect(() => {\r\n    if (socket == null) return;\r\n\r\n    socket.on(\"recieve-new-conversation\", () => {\r\n      console.log(\"someone else opened a new conversation!\");\r\n      axios\r\n        .post(CONVERSATIONS_URL, { refreshToken: refreshToken })\r\n        .then(res => {\r\n          setConversations(res.data);\r\n        });\r\n    });\r\n\r\n    return () => socket.off(\"recieve-new-conversation\");\r\n  }, [socket, createConversation]);\r\n\r\n  return (\r\n    <ConversationsContext.Provider\r\n      value={{\r\n        conversations,\r\n        createConversation,\r\n        selectedConversationIdx,\r\n        setSelectedConversationIdx,\r\n        sendMessage,\r\n      }}\r\n    >\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n\r\nfunction arrayEquality(a, b) {\r\n  if (a.length !== b.length) return false;\r\n\r\n  a.sort();\r\n  b.sort();\r\n\r\n  return a.every((element, index) => {\r\n    return element === b[index];\r\n  });\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}